{"version":3,"file":"index.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n  session_connect: \"session_connect\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  // evm\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  // solana\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n\n  // sui\n  sui_signAndExecuteTransaction: {\n    key: \"digest\",\n  },\n  sui_signTransaction: {\n    key: \"\",\n  },\n\n  // hedera\n  hedera_signAndExecuteTransaction: {\n    key: \"transactionId\",\n  },\n  hedera_executeTransaction: {\n    key: \"transactionId\",\n  },\n\n  // near\n  near_signTransaction: {\n    key: \"\",\n  },\n  near_signTransactions: {\n    key: \"\",\n  },\n\n  // tron\n  tron_signTransaction: {\n    key: \"txID\",\n  },\n\n  // xrpl\n  xrpl_signTransaction: {\n    key: \"\",\n  },\n\n  xrpl_signTransactionFor: {\n    key: \"\",\n  },\n\n  // algorand\n  algo_signTxn: {\n    key: \"\",\n  },\n\n  // bitcoin\n  sendTransfer: {\n    key: \"txid\",\n  },\n\n  // stacks\n  stacks_stxTransfer: {\n    key: \"txId\",\n  },\n\n  // polkadot\n  polkadot_signTransaction: {\n    key: \"\",\n  },\n\n  // cosmos\n  cosmos_signDirect: {\n    key: \"\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","import {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n  extractSolanaTransactionId,\n  getSuiDigest,\n  mergeRequiredAndOptionalNamespaces,\n  getNearTransactionIdFromSignedTransaction,\n  getAlgorandTransactionId,\n  buildSignedExtrinsicHash,\n  getSignDirectHash,\n  LimitedSet,\n  getWalletSendCallsHashes,\n  getNamespacesChains,\n  getNamespacesMethods,\n  getNamespacesEvents,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants/index.js\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  // This prevents duplicate emissions due to WalletConnect's at-least-once delivery guarantee.\n  // When disableRequestQueue is enabled, consumers must implement additional deduplication.\n  private emittedSessionRequests = new LimitedSet({ limit: 500 });\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n  private pendingSessions: Map<\n    number,\n    {\n      sessionTopic: string;\n      pairingTopic: string;\n      proposalId: number;\n      publicKey: string;\n    }\n  > = new Map();\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(async () => {\n        await this.processPendingMessageEvents();\n\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  private async processPendingMessageEvents() {\n    try {\n      const topics = this.client.session.keys;\n      const pendingMessages = this.client.core.relayer.messages.getWithoutAck(topics);\n      for (const [topic, messages] of Object.entries(pendingMessages)) {\n        for (const message of messages) {\n          try {\n            await this.onProviderMessageEvent({\n              topic,\n              message,\n              publishedAt: Date.now(),\n            });\n          } catch (error) {\n            this.client.logger.warn(\n              `Error processing pending message event for topic: ${topic}, message: ${message}`,\n            );\n          }\n        }\n      }\n    } catch (error) {\n      this.client.logger.warn(error, \"processPendingMessageEvents failed\");\n    }\n  }\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n\n    // requiredNamespaces are deprecated, assign them to optionalNamespaces\n    connectParams.optionalNamespaces = mergeRequiredAndOptionalNamespaces(\n      connectParams.requiredNamespaces,\n      connectParams.optionalNamespaces,\n    );\n\n    connectParams.requiredNamespaces = {};\n\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n      authentication,\n      walletPay,\n    } = connectParams;\n\n    const expiryFromAuthentication = authentication?.[0]?.ttl;\n    const expiry =\n      expiryFromAuthentication || ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    this.validateRequestExpiry(expiry);\n\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create({\n        internal: { skipSubscribe: true },\n      });\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal: ProposalTypes.Struct = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      id: payloadId(),\n      ...((authentication || walletPay) && {\n        requests: {\n          authentication: authentication?.map((auth) => {\n            const {\n              domain,\n              chains,\n              nonce,\n              uri,\n              exp,\n              nbf,\n              type,\n              statement,\n              requestId,\n              resources,\n              signatureTypes,\n            } = auth;\n            const protocolParams: AuthTypes.AuthenticateParams = {\n              domain,\n              chains,\n              nonce,\n              type: type ?? \"caip122\",\n              aud: uri,\n              version: \"1\",\n              iat: new Date().toISOString(),\n              exp,\n              nbf,\n              statement,\n              requestId,\n              resources,\n              signatureTypes,\n            };\n            return protocolParams;\n          }),\n          walletPay,\n        },\n      }),\n    };\n\n    const sessionConnectTarget = engineEvent(\"session_connect\", proposal.id);\n\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n\n    const proposalExpireHandler = ({ id }: { id: number }) => {\n      if (id === proposal.id) {\n        this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n        this.pendingSessions.delete(proposal.id);\n        // emit the event to trigger reject, this approach automatically cleans up the .once listener below\n        this.events.emit(sessionConnectTarget, {\n          error: { message: PROPOSAL_EXPIRY_MESSAGE, code: 0 },\n        });\n      }\n    };\n\n    this.client.events.on(\"proposal_expire\", proposalExpireHandler);\n    this.events.once<\"session_connect\">(sessionConnectTarget, ({ error, session }) => {\n      this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n      if (error) reject(error);\n      else if (session) {\n        resolve(session);\n      }\n    });\n\n    await this.setProposal(proposal.id, proposal);\n\n    await this.sendProposeSession({\n      proposal,\n      publishOpts: {\n        internal: {\n          throwOnFailedPublish: true,\n        },\n        tvf: {\n          correlationId: proposal.id,\n        },\n      },\n    }).catch((error) => {\n      this.deleteProposal(proposal.id);\n      throw error;\n    });\n\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const {\n      id,\n      relayProtocol,\n      namespaces,\n      sessionProperties,\n      scopedProperties,\n      sessionConfig,\n      proposalRequestsResponses,\n    } = params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(scopedProperties && { scopedProperties }),\n      ...(sessionConfig && { sessionConfig }),\n      proposalRequestsResponses,\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n        internal: { skipSubscribe: true },\n      });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session: SessionTypes.Struct = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n      authentication: proposalRequestsResponses?.authentication,\n      walletPayResult: proposalRequestsResponses?.walletPay,\n    };\n\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      await this.sendApproveSession({\n        sessionTopic,\n        proposal,\n        pairingProposalResponse: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        sessionSettleRequest: sessionSettle,\n        publishOpts: {\n          internal: {\n            throwOnFailedPublish: true,\n          },\n          tvf: {\n            correlationId: id,\n            ...this.getTVFApproveParams(session),\n          },\n        },\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.deleteProposal(id);\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n    }\n\n    await this.deleteProposal(id);\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const {\n      done: acknowledged,\n      resolve,\n      reject,\n    } = createDelayedPromise<void>(\n      FIVE_MINUTES,\n      \"Session update request expired without receiving any acknowledgement\",\n    );\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const {\n      done: acknowledged,\n      resolve,\n      reject,\n    } = createDelayedPromise<void>(\n      FIVE_MINUTES,\n      \"Session extend request expired without receiving any acknowledgement\",\n    );\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.topic || params?.response?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_request_response_started],\n      },\n    });\n    try {\n      await this.isValidRespond(params);\n    } catch (error) {\n      event.addTrace((error as Error)?.message);\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.session_request_response_validation_failure);\n\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_request_response_validation_success);\n\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_request_response_publish_started);\n      if (isJsonRpcResult(response)) {\n        await this.sendResult({\n          id,\n          topic,\n          result: response.result,\n          throwOnFailedPublish: true,\n          appLink,\n        });\n      } else if (isJsonRpcError(response)) {\n        await this.sendError({ id, topic, error: response.error, appLink });\n      }\n      this.cleanupAfterResponse(params);\n    } catch (error) {\n      event.addTrace((error as Error)?.message);\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.session_request_response_publish_failure);\n      throw error;\n    }\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>(\n        FIVE_MINUTES,\n        \"Ping request expired without receiving any acknowledgement\",\n      );\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n      id: payloadId(),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    const authenticateId = payloadId();\n    const sessionConnectEventTarget = engineEvent(\"session_connect\", proposal.id);\n    const authenticateEventTarget = engineEvent(\"session_request\", authenticateId);\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        resolve({\n          session,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(authenticateId, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(sessionConnectEventTarget, onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(proposal.id);\n      // cleanup listener for fallback response\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(sessionConnectEventTarget, onSessionConnect);\n    this.events.once(authenticateEventTarget, onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, authenticateId);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: authenticateId,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: proposal.id,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(proposal.id, proposal);\n    await this.setAuthRequest(authenticateId, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.deleteProposal(id);\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  /**\n   * no longer used as the client initializes instantly without waiting to connect+subscribe\n   * @deprecated\n   */\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n\n    await Promise.all(\n      this.getPendingSessionRequests()\n        .filter((r) => r.topic === topic)\n        .map((r) => this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"))),\n    );\n\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n      publishOpts = {},\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n\n    const opts = {\n      ...ENGINE_RPC_OPTS[method].req,\n      ...publishOpts,\n    };\n\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendProposeSession: EnginePrivate[\"sendProposeSession\"] = async (params) => {\n    const { proposal, publishOpts } = params;\n\n    const proposeSessionPayload = formatJsonRpcRequest(\"wc_sessionPropose\", proposal, proposal.id);\n\n    this.client.core.history.set(proposal.pairingTopic, proposeSessionPayload);\n\n    const proposeSessionMessage = await this.client.core.crypto.encode(\n      proposal.pairingTopic,\n      proposeSessionPayload,\n      {\n        encoding: BASE64,\n      },\n    );\n\n    const decryptedId = hashMessage(JSON.stringify(proposeSessionPayload));\n    const attestationId = hashMessage(proposeSessionMessage);\n    const attestation = await this.client.core.verify.register({ id: attestationId, decryptedId });\n\n    await this.client.core.relayer.publishCustom({\n      payload: {\n        pairingTopic: proposal.pairingTopic,\n        sessionProposal: proposeSessionMessage,\n      },\n      opts: {\n        ...publishOpts,\n        publishMethod: \"wc_proposeSession\",\n        attestation,\n      },\n    });\n  };\n\n  private sendApproveSession: EnginePrivate[\"sendApproveSession\"] = async (params) => {\n    const { sessionTopic, pairingProposalResponse, proposal, sessionSettleRequest, publishOpts } =\n      params;\n    const pairingPayload = formatJsonRpcResult(proposal.id, pairingProposalResponse);\n\n    const pairingResponseMessage = await this.client.core.crypto.encode(\n      proposal.pairingTopic,\n      pairingPayload,\n      {\n        encoding: BASE64,\n      },\n    );\n\n    const sessionSettlePayload = formatJsonRpcRequest(\n      \"wc_sessionSettle\",\n      sessionSettleRequest,\n      publishOpts?.id,\n    );\n\n    const sessionSettlementRequestMessage = await this.client.core.crypto.encode(\n      sessionTopic,\n      sessionSettlePayload,\n      {\n        encoding: BASE64,\n      },\n    );\n\n    this.client.core.history.set(sessionTopic, sessionSettlePayload);\n\n    await this.client.core.relayer.publishCustom({\n      payload: {\n        sessionTopic,\n        pairingTopic: proposal.pairingTopic,\n        sessionProposalResponse: pairingResponseMessage,\n        sessionSettlementRequest: sessionSettlementRequestMessage,\n      },\n      opts: {\n        ...publishOpts,\n        publishMethod: \"wc_approveSession\",\n      },\n    });\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        tvf = this.getTVFParams(id, request.params, result);\n      } catch (error) {\n        this.client.logger.warn(\n          `sendResult() -> getTVFParams() failed: ${(error as Error)?.message}`,\n        );\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = ENGINE_RPC_OPTS[method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = rpcOpts || ENGINE_RPC_OPTS[method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      this.onProviderMessageEvent(event);\n    });\n  }\n\n  private onProviderMessageEvent = async (event: RelayerTypes.MessageEvent) => {\n    // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n    if (!this.initialized || this.relayMessageCache.length > 0) {\n      this.relayMessageCache.push(event);\n    } else {\n      await this.onRelayMessage(event);\n    }\n  };\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    try {\n      const payload = await this.client.core.crypto.decode(topic, message, {\n        receiverPublicKey: publicKey,\n        encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n      });\n\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        await this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        this.client.logger.error(`onRelayMessage() -> unknown payload: ${JSON.stringify(payload)}`);\n        await this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n      await this.client.core.relayer.messages.ack(topic, message);\n    } catch (error) {\n      this.client.logger.error(\n        `onRelayMessage() -> failed to process an inbound message: ${message}`,\n      );\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal: ProposalTypes.Struct = {\n        id,\n        pairingTopic: topic,\n        expiryTimestamp,\n        attestation,\n        encryptedId,\n        ...params,\n      };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.pendingSessions.set(id, {\n        sessionTopic,\n        pairingTopic: topic,\n        proposalId: id,\n        publicKey: selfPublicKey,\n      });\n\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.deleteProposal(id);\n      const target = engineEvent(\"session_connect\", id);\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(target, { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        scopedProperties,\n        sessionConfig,\n        proposalRequestsResponses,\n      } = payload.params;\n      const pendingSession = [...this.pendingSessions.values()].find(\n        (s) => s.sessionTopic === topic,\n      );\n\n      if (!pendingSession) {\n        return this.client.logger.error(`Pending session not found for topic ${topic}`);\n      }\n\n      const proposal = this.client.proposal.get(pendingSession.proposalId);\n\n      const session: SessionTypes.Struct = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: pendingSession.pairingTopic,\n        requiredNamespaces: proposal.requiredNamespaces,\n        optionalNamespaces: proposal.optionalNamespaces,\n        controller: controller.publicKey,\n        self: {\n          publicKey: pendingSession.publicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(scopedProperties && { scopedProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n        authentication: proposalRequestsResponses?.authentication,\n        walletPayResult: proposalRequestsResponses?.walletPay,\n      };\n\n      await this.client.session.set(session.topic, session);\n      await this.setExpiry(session.topic, session.expiry);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingSession.pairingTopic,\n        metadata: session.peer.metadata,\n      });\n\n      this.pendingSessions.delete(pendingSession.proposalId);\n      this.deleteProposal(pendingSession.proposalId, false);\n      this.cleanupDuplicatePairings(session);\n\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        throwOnFailedPublish: true,\n        result: true,\n      });\n\n      this.client.events.emit(\"session_connect\", { session });\n      this.events.emit(engineEvent(\"session_connect\", pendingSession.proposalId), { session });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 2176`);\n      }\n\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      await this.isValidDisconnect({ topic, reason: payload.params });\n      this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") });\n      await this.deleteSession({ topic, id });\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      // without sequential processing. This bypasses deduplication provided by the queue,\n      // at-least-once delivery guarantee.\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  /**\n   * Adds a session request to the sequential processing queue.\n   *\n   * The queue provides built-in deduplication and sequential processing,\n   * which helps handle WalletConnect's at-least-once delivery guarantee.\n   */\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  /**\n   * Emits a session request event with built-in deduplication.\n   *\n   * This method implements deduplication using emittedSessionRequests set to handle\n   * WalletConnect's at-least-once delivery guarantee. However, when disableRequestQueue\n   * is enabled, additional deduplication may be needed at the consumer level.\n   */\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    if (this.emittedSessionRequests.has(request.id)) {\n      this.client.logger.warn(\n        {\n          id: request.id,\n        },\n        `Skipping emitting \\`session_request\\` event for duplicate request. id: ${request.id}`,\n      );\n      return;\n    }\n    this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n    this.emittedSessionRequests.add(request.id);\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          ...proposal,\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n          scopedProperties: proposal.scopedProperties,\n        },\n        proposal.id,\n      ),\n      attestation: proposal.attestation,\n      encryptedId: proposal.encryptedId,\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const {\n      pairingTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      sessionProperties,\n      scopedProperties,\n      relays,\n    } = params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (\n      requiredNamespaces &&\n      !isUndefined(requiredNamespaces) &&\n      isValidObject(requiredNamespaces) !== 0\n    ) {\n      const warning =\n        \"requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces\";\n      // if logger level is one of the following, the logger.warn will not be shown, so we need to use console.warn\n      if ([\"fatal\", \"error\", \"silent\"].includes(this.client.logger.level)) {\n        console.warn(warning);\n      } else {\n        this.client.logger.warn(warning);\n      }\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (\n      optionalNamespaces &&\n      !isUndefined(optionalNamespaces) &&\n      isValidObject(optionalNamespaces) !== 0\n    ) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (sessionProperties && !isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (scopedProperties && !isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const requestedNamespaces = Object.keys(requiredNamespaces || {}).concat(\n        Object.keys(optionalNamespaces || {}),\n      );\n\n      const scopedNamespaces = Object.keys(scopedProperties);\n      // .split(\":\")[0] to account for inline <namespace>:<chainId>\n      const valid = scopedNamespaces.every((ns) => requestedNamespaces.includes(ns.split(\":\")[0]));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, required/optional namespaces: ${JSON.stringify(requestedNamespaces)}`,\n        );\n      }\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties, scopedProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (sessionProperties && !isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n\n    if (scopedProperties && !isUndefined(scopedProperties)) {\n      this.validateSessionProps(scopedProperties, \"scopedProperties\");\n\n      const approvedNamespaces = new Set(Object.keys(namespaces));\n      const scopedNamespaces = Object.keys(scopedProperties);\n\n      // the approved scoped namespaces must be a subset of the approved namespaces\n      // .split(\":\")[0] to account for inline <namespace>:<chainId>\n      const valid = scopedNamespaces.every((ns) => approvedNamespaces.has(ns.split(\":\")[0]));\n      if (!valid) {\n        throw new Error(\n          `Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(\n            scopedProperties,\n          )}, approved namespaces: ${Array.from(approvedNamespaces).join(\", \")}`,\n        );\n      }\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    this.validateRequestExpiry(expiry);\n  };\n\n  private validateRequestExpiry(expiry?: number) {\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n\n    const request = this.client.pendingRequest.get(response.id);\n\n    if (request.topic !== topic) {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Request response topic mismatch. reqId: ${response.id}, expected topic: ${request.topic}, received topic: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: SessionTypes.ScopedProperties, type: string) => {\n    Object.values(properties).forEach((property, index) => {\n      if (property === null || property === undefined) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must contain an existing value for each key. Received: ${property} for key ${\n            Object.keys(properties)[index]\n          }`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private getTVFApproveParams = (session: SessionTypes.Struct) => {\n    try {\n      const approvedChains = getNamespacesChains(session.namespaces);\n      const approvedMethods = getNamespacesMethods(session.namespaces);\n      const approvedEvents = getNamespacesEvents(session.namespaces);\n      const sessionProperties = session.sessionProperties;\n      const scopedProperties = session.scopedProperties;\n      return {\n        approvedChains,\n        approvedMethods,\n        approvedEvents,\n        sessionProperties,\n        scopedProperties,\n      };\n    } catch (e) {\n      this.client.logger.warn(e, \"Error getting TVF approve params\");\n      return {};\n    }\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    // this check will filter all Sign protocol methods since they don't have a method property\n    if (!params.request?.method) {\n      return {};\n    }\n\n    const tvf: RelayerTypes.ITVF = {\n      correlationId: id,\n      rpcMethods: [params.request.method],\n      chainId: params.chainId,\n    };\n    try {\n      const txHashes = this.extractTxHashesFromResult(params.request, result);\n      tvf.txHashes = txHashes;\n      tvf.contractAddresses = this.isValidContractData(params.request.params)\n        ? [params.request.params?.[0]?.to]\n        : [];\n    } catch (e) {\n      this.client.logger.warn(e, \"Error getting TVF params\");\n    }\n    return tvf;\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (\n    request: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"][\"request\"],\n    result: any,\n  ): string[] => {\n    try {\n      if (!result) return [];\n\n      const method = request.method;\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n\n      if (method === \"sui_signTransaction\") {\n        return [getSuiDigest(result.transactionBytes)];\n      }\n\n      if (method === \"near_signTransaction\") {\n        return [getNearTransactionIdFromSignedTransaction(result)];\n      }\n\n      if (method === \"near_signTransactions\") {\n        return result.map((tx: any) => getNearTransactionIdFromSignedTransaction(tx));\n      }\n\n      if (method === \"xrpl_signTransactionFor\" || method === \"xrpl_signTransaction\") {\n        return [result.tx_json?.hash];\n      }\n\n      if (method === \"polkadot_signTransaction\") {\n        return [\n          buildSignedExtrinsicHash({\n            transaction: request.params.transactionPayload,\n            signature: result.signature,\n          }),\n        ];\n      }\n\n      if (method === \"algo_signTxn\") {\n        return isValidArray(result)\n          ? result.map((tx: any) => getAlgorandTransactionId(tx))\n          : [getAlgorandTransactionId(result)];\n      }\n\n      if (method === \"cosmos_signDirect\") {\n        return [getSignDirectHash(result)];\n      }\n\n      if (method === \"wallet_sendCalls\") {\n        return getWalletSendCallsHashes(result);\n      }\n\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes: string[] = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        if (method === \"solana_signAllTransactions\") {\n          return hashes.map((hash) => extractSolanaTransactionId(hash));\n        }\n\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(e, \"Error extracting tx hashes from result\");\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants/index.js\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants/index.js\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants/index.js\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport {\n  AUTH_KEYS_CONTEXT,\n  AUTH_STORAGE_PREFIX,\n  AUTH_PUBLIC_KEY_NAME,\n} from \"../constants/index.js\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants/index.js\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants/index.js\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic.js\";\nimport { AuthRequest } from \"./authRequest.js\";\nimport { AuthKey } from \"./authKey.js\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n  ) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { EventEmitter } from \"events\";\nimport { Core } from \"@walletconnect/core\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { populateAppMetadata, createLogger } from \"@walletconnect/utils\";\nimport { getLoggerContext } from \"@walletconnect/logger\";\nimport {\n  SIGN_CLIENT_DEFAULT,\n  SIGN_CLIENT_PROTOCOL,\n  SIGN_CLIENT_VERSION,\n} from \"./constants/index.js\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers/index.js\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = populateAppMetadata(opts?.metadata);\n    this.signConfig = opts?.signConfig;\n\n    const logger = createLogger({\n      logger: opts?.logger || SIGN_CLIENT_DEFAULT.logger,\n      name: this.name,\n    });\n    this.logger = logger;\n    this.core = opts?.core || new Core(opts);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client.js\";\nimport { Session } from \"./controllers/session.js\";\nexport * from \"./constants/index.js\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","LimitedSet","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","_a","connectParams","__spreadProps","__spreadValues","mergeRequiredAndOptionalNamespaces","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","scopedProperties","relays","authentication","walletPay","expiry","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","payloadId","auth","domain","chains","nonce","exp","nbf","type","statement","requestId","resources","signatureTypes","sessionConnectTarget","engineEvent","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","proposalExpireHandler","id","session","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposalRequestsResponses","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","TRANSPORT_TYPES","getSdkError","reason","acknowledged","clientRpcId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","methods","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","authenticateId","sessionConnectEventTarget","authenticateEventTarget","onSessionConnect","onAuthenticate","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","publishOpts","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","proposeSessionPayload","proposeSessionMessage","attestationId","pairingProposalResponse","sessionSettleRequest","pairingPayload","formatJsonRpcResult","pairingResponseMessage","sessionSettlePayload","sessionSettlementRequestMessage","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","pendingSession","s","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","warning","requestedNamespaces","ns","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","approvedNamespaces","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidResponse","isValidEvent","isValidNamespacesEvent","hash","metadata","context","VERIFY_SERVER","applink","properties","property","index","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","getNamespacesChains","getNamespacesMethods","approvedEvents","getNamespacesEvents","txHashes","data","hexPart","methodConfig","TVF_METHODS","getSuiDigest","getNearTransactionIdFromSignedTransaction","tx","buildSignedExtrinsicHash","isValidArray","getAlgorandTransactionId","getSignDirectHash","getWalletSendCallsHashes","hashes","extractSolanaTransactionId","topics","pendingMessages","messages","RELAYER_EVENTS","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","populateAppMetadata","createLogger","Core","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}