import Pt,{EventEmitter as Nt}from"events";import{RELAYER_EVENTS as Ot,TRANSPORT_TYPES as P,EXPIRER_EVENTS as bt,PAIRING_EVENTS as Ye,RELAYER_DEFAULT_PROTOCOL as At,EVENT_CLIENT_SESSION_TRACES as L,EVENT_CLIENT_SESSION_ERRORS as B,EVENT_CLIENT_AUTHENTICATE_TRACES as W,EVENT_CLIENT_AUTHENTICATE_ERRORS as ge,EVENT_CLIENT_PAIRING_ERRORS as xt,EVENT_CLIENT_PAIRING_TRACES as Ct,VERIFY_SERVER as Vt,Store as re,Core as kt}from"@walletconnect/core";import{IEngine as Dt,ISignClient as Lt}from"@walletconnect/types";import{LimitedSet as Mt,getInternalError as m,BASE64URL as ye,BASE64 as Z,hashMessage as G,parseExpirerTarget as $t,isValidString as ee,isExpired as ne,isValidId as Kt,isValidRequestExpiry as Ut,mergeRequiredAndOptionalNamespaces as Gt,calcExpiry as k,engineEvent as I,createDelayedPromise as oe,getSdkError as M,getDeepLink as jt,handleDeeplinkRedirect as Ft,isSessionCompatible as Ht,hashKey as Ae,parseChainId as xe,createEncodedRecap as Qt,getRecapFromResources as Ce,mergeEncodedRecaps as zt,TYPE_2 as Yt,getLinkModeURL as Ee,validateSignedCacao as Je,getNamespacedDidChainId as Xe,getDidAddress as Be,getMethodsFromRecap as We,getChainsFromRecap as Ze,buildNamespacesFromAuth as et,formatMessage as Jt,MemoryStore as me,isValidParams as $,isUndefined as te,isValidRelays as Xt,isValidObject as tt,isValidRequiredNamespaces as Bt,isValidNamespaces as Ve,isConformingNamespaces as st,isValidErrorReason as Wt,isValidRelay as Zt,isValidController as es,isValidNamespacesChainId as it,isValidRequest as ts,isValidNamespacesRequest as ss,isValidResponse as is,isValidEvent as rs,isValidNamespacesEvent as ns,getSearchParamFromURL as rt,isTestRun as os,isReactNative as as,getNamespacesChains as cs,getNamespacesMethods as ls,getNamespacesEvents as ps,getSuiDigest as hs,getNearTransactionIdFromSignedTransaction as nt,buildSignedExtrinsicHash as ds,isValidArray as ot,getAlgorandTransactionId as at,getSignDirectHash as us,getWalletSendCallsHashes as gs,extractSolanaTransactionId as ys,TYPE_1 as ke,populateAppMetadata as ms,createLogger as ws}from"@walletconnect/utils";import{getLoggerContext as _s}from"@walletconnect/logger";import{THIRTY_DAYS as vs,SEVEN_DAYS as ct,FIVE_MINUTES as O,ONE_DAY as j,ONE_HOUR as lt,ONE_SECOND as Ss,toMiliseconds as pt}from"@walletconnect/time";import{isJsonRpcRequest as Es,isJsonRpcResponse as fs,payloadId as F,getBigIntRpcId as fe,isJsonRpcResult as H,isJsonRpcError as Q,formatJsonRpcRequest as ae,formatJsonRpcResult as ht,formatJsonRpcError as Rs}from"@walletconnect/jsonrpc-utils";const De="wc",Le=2,Me="client",Re=`${De}@${Le}:${Me}:`,Ie={name:Me,logger:"error",controller:!1,relayUrl:"wss://relay.walletconnect.org"},Is={session_proposal:"session_proposal",session_update:"session_update",session_extend:"session_extend",session_ping:"session_ping",session_delete:"session_delete",session_expire:"session_expire",session_request:"session_request",session_request_sent:"session_request_sent",session_event:"session_event",proposal_expire:"proposal_expire",session_authenticate:"session_authenticate",session_request_expire:"session_request_expire",session_connect:"session_connect"},Ts={database:":memory:"},$e="WALLETCONNECT_DEEPLINK_CHOICE",qs={created:"history_created",updated:"history_updated",deleted:"history_deleted",sync:"history_sync"},Ps="history",Ns="0.3",dt="proposal",Os=vs,Ke="Proposal expired",ut="session",se=ct,gt="engine",N={wc_sessionPropose:{req:{ttl:O,prompt:!0,tag:1100},res:{ttl:O,prompt:!1,tag:1101},reject:{ttl:O,prompt:!1,tag:1120},autoReject:{ttl:O,prompt:!1,tag:1121}},wc_sessionSettle:{req:{ttl:O,prompt:!1,tag:1102},res:{ttl:O,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:j,prompt:!1,tag:1104},res:{ttl:j,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:j,prompt:!1,tag:1106},res:{ttl:j,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:O,prompt:!0,tag:1108},res:{ttl:O,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:O,prompt:!0,tag:1110},res:{ttl:O,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:j,prompt:!1,tag:1112},res:{ttl:j,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:j,prompt:!1,tag:1114},res:{ttl:j,prompt:!1,tag:1115}},wc_sessionAuthenticate:{req:{ttl:lt,prompt:!0,tag:1116},res:{ttl:lt,prompt:!1,tag:1117},reject:{ttl:O,prompt:!1,tag:1118},autoReject:{ttl:O,prompt:!1,tag:1119}}},Te={min:O,max:ct},K={idle:"IDLE",active:"ACTIVE"},yt={eth_sendTransaction:{key:""},eth_sendRawTransaction:{key:""},wallet_sendCalls:{key:""},solana_signTransaction:{key:"signature"},solana_signAllTransactions:{key:"transactions"},solana_signAndSendTransaction:{key:"signature"},sui_signAndExecuteTransaction:{key:"digest"},sui_signTransaction:{key:""},hedera_signAndExecuteTransaction:{key:"transactionId"},hedera_executeTransaction:{key:"transactionId"},near_signTransaction:{key:""},near_signTransactions:{key:""},tron_signTransaction:{key:"txID"},xrpl_signTransaction:{key:""},xrpl_signTransactionFor:{key:""},algo_signTxn:{key:""},sendTransfer:{key:"txid"},stacks_stxTransfer:{key:"txId"},polkadot_signTransaction:{key:""},cosmos_signDirect:{key:""}},mt="request",wt=["wc_sessionPropose","wc_sessionRequest","wc_authRequest","wc_sessionAuthenticate"],_t="wc",bs=1.5,vt="auth",St="authKeys",Et="pairingTopics",ft="requests",we=`${_t}@${1.5}:${vt}:`,_e=`${we}:PUB_KEY`;var As=Object.defineProperty,xs=Object.defineProperties,Cs=Object.getOwnPropertyDescriptors,Rt=Object.getOwnPropertySymbols,Vs=Object.prototype.hasOwnProperty,ks=Object.prototype.propertyIsEnumerable,Ue=(S,o,e)=>o in S?As(S,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):S[o]=e,E=(S,o)=>{for(var e in o||(o={}))Vs.call(o,e)&&Ue(S,e,o[e]);if(Rt)for(var e of Rt(o))ks.call(o,e)&&Ue(S,e,o[e]);return S},b=(S,o)=>xs(S,Cs(o)),c=(S,o,e)=>Ue(S,typeof o!="symbol"?o+"":o,e);class Ds extends Dt{constructor(o){super(o),c(this,"name",gt),c(this,"events",new Pt),c(this,"initialized",!1),c(this,"requestQueue",{state:K.idle,queue:[]}),c(this,"sessionRequestQueue",{state:K.idle,queue:[]}),c(this,"emittedSessionRequests",new Mt({limit:500})),c(this,"requestQueueDelay",Ss),c(this,"expectedPairingMethodMap",new Map),c(this,"recentlyDeletedMap",new Map),c(this,"recentlyDeletedLimit",200),c(this,"relayMessageCache",[]),c(this,"pendingSessions",new Map),c(this,"init",async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.registerPairingEvents(),await this.registerLinkModeListeners(),this.client.core.pairing.register({methods:Object.keys(N)}),this.initialized=!0,setTimeout(async()=>{await this.processPendingMessageEvents(),this.sessionRequestQueue.queue=this.getPendingSessionRequests(),this.processSessionRequestQueue()},pt(this.requestQueueDelay)))}),c(this,"connect",async e=>{var t;this.isInitialized(),await this.confirmOnlineStateOrThrow();const s=b(E({},e),{requiredNamespaces:e.requiredNamespaces||{},optionalNamespaces:e.optionalNamespaces||{}});await this.isValidConnect(s),s.optionalNamespaces=Gt(s.requiredNamespaces,s.optionalNamespaces),s.requiredNamespaces={};const{pairingTopic:i,requiredNamespaces:r,optionalNamespaces:n,sessionProperties:a,scopedProperties:l,relays:h,authentication:p,walletPay:y}=s,d=((t=p?.[0])==null?void 0:t.ttl)||N.wc_sessionPropose.req.ttl||O;this.validateRequestExpiry(d);let u=i,w,g=!1;try{if(u){const R=this.client.core.pairing.pairings.get(u);this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."),g=R.active}}catch(R){throw this.client.logger.error(`connect() -> pairing.get(${u}) failed`),R}if(!u||!g){const{topic:R,uri:q}=await this.client.core.pairing.create({internal:{skipSubscribe:!0}});u=R,w=q}if(!u){const{message:R}=m("NO_MATCHING_KEY",`connect() pairing topic: ${u}`);throw new Error(R)}const f=await this.client.core.crypto.generateKeyPair(),v=k(d),T=E(b(E(E({requiredNamespaces:r,optionalNamespaces:n,relays:h??[{protocol:At}],proposer:{publicKey:f,metadata:this.client.metadata},expiryTimestamp:v,pairingTopic:u},a&&{sessionProperties:a}),l&&{scopedProperties:l}),{id:F()}),(p||y)&&{requests:{authentication:p?.map(R=>{const{domain:q,chains:ve,nonce:ce,uri:Y,exp:ie,nbf:le,type:J,statement:pe,requestId:he,resources:C,signatureTypes:D}=R;return{domain:q,chains:ve,nonce:ce,type:J??"caip122",aud:Y,version:"1",iat:new Date().toISOString(),exp:ie,nbf:le,statement:pe,requestId:he,resources:C,signatureTypes:D}}),walletPay:y}}),A=I("session_connect",T.id),{reject:V,resolve:x,done:U}=oe(d,Ke),z=({id:R})=>{R===T.id&&(this.client.events.off("proposal_expire",z),this.pendingSessions.delete(T.id),this.events.emit(A,{error:{message:Ke,code:0}}))};return this.client.events.on("proposal_expire",z),this.events.once(A,({error:R,session:q})=>{this.client.events.off("proposal_expire",z),R?V(R):q&&x(q)}),await this.setProposal(T.id,T),await this.sendProposeSession({proposal:T,publishOpts:{internal:{throwOnFailedPublish:!0},tvf:{correlationId:T.id}}}).catch(R=>{throw this.deleteProposal(T.id),R}),{uri:w,approval:U}}),c(this,"pair",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{return await this.client.core.pairing.pair(e)}catch(t){throw this.client.logger.error("pair() failed"),t}}),c(this,"approve",async e=>{var t,s,i;const r=this.client.core.eventClient.createEvent({properties:{topic:(t=e?.id)==null?void 0:t.toString(),trace:[L.session_approve_started]}});try{this.isInitialized(),await this.confirmOnlineStateOrThrow()}catch(q){throw r.setError(B.no_internet_connection),q}try{await this.isValidProposalId(e?.id)}catch(q){throw this.client.logger.error(`approve() -> proposal.get(${e?.id}) failed`),r.setError(B.proposal_not_found),q}try{await this.isValidApprove(e)}catch(q){throw this.client.logger.error("approve() -> isValidApprove() failed"),r.setError(B.session_approve_namespace_validation_failure),q}const{id:n,relayProtocol:a,namespaces:l,sessionProperties:h,scopedProperties:p,sessionConfig:y,proposalRequestsResponses:d}=e,u=this.client.proposal.get(n);this.client.core.eventClient.deleteEvent({eventId:r.eventId});const{pairingTopic:w,proposer:g,requiredNamespaces:f,optionalNamespaces:v}=u;let T=(s=this.client.core.eventClient)==null?void 0:s.getEvent({topic:w});T||(T=(i=this.client.core.eventClient)==null?void 0:i.createEvent({type:L.session_approve_started,properties:{topic:w,trace:[L.session_approve_started,L.session_namespaces_validation_success]}}));const A=await this.client.core.crypto.generateKeyPair(),V=g.publicKey,x=await this.client.core.crypto.generateSharedKey(A,V),U=b(E(E(E({relay:{protocol:a??"irn"},namespaces:l,controller:{publicKey:A,metadata:this.client.metadata},expiry:k(se)},h&&{sessionProperties:h}),p&&{scopedProperties:p}),y&&{sessionConfig:y}),{proposalRequestsResponses:d}),z=P.relay;T.addTrace(L.subscribing_session_topic);try{await this.client.core.relayer.subscribe(x,{transportType:z,internal:{skipSubscribe:!0}})}catch(q){throw T.setError(B.subscribe_session_topic_failure),q}T.addTrace(L.subscribe_session_topic_success);const R=b(E({},U),{topic:x,requiredNamespaces:f,optionalNamespaces:v,pairingTopic:w,acknowledged:!1,self:U.controller,peer:{publicKey:g.publicKey,metadata:g.metadata},controller:A,transportType:P.relay,authentication:d?.authentication,walletPayResult:d?.walletPay});await this.client.session.set(x,R),T.addTrace(L.store_session);try{await this.sendApproveSession({sessionTopic:x,proposal:u,pairingProposalResponse:{relay:{protocol:a??"irn"},responderPublicKey:A},sessionSettleRequest:U,publishOpts:{internal:{throwOnFailedPublish:!0},tvf:E({correlationId:n},this.getTVFApproveParams(R))}}),T.addTrace(L.session_approve_publish_success)}catch(q){throw this.client.logger.error(q),this.client.session.delete(x,M("USER_DISCONNECTED")),await this.client.core.relayer.unsubscribe(x),q}return this.client.core.eventClient.deleteEvent({eventId:T.eventId}),await this.client.core.pairing.updateMetadata({topic:w,metadata:g.metadata}),await this.deleteProposal(n),await this.client.core.pairing.activate({topic:w}),await this.setExpiry(x,k(se)),{topic:x,acknowledged:()=>Promise.resolve(this.client.session.get(x))}}),c(this,"reject",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidReject(e)}catch(r){throw this.client.logger.error("reject() -> isValidReject() failed"),r}const{id:t,reason:s}=e;let i;try{i=this.client.proposal.get(t).pairingTopic}catch(r){throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`),r}i&&await this.sendError({id:t,topic:i,error:s,rpcOpts:N.wc_sessionPropose.reject}),await this.deleteProposal(t)}),c(this,"update",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidUpdate(e)}catch(p){throw this.client.logger.error("update() -> isValidUpdate() failed"),p}const{topic:t,namespaces:s}=e,{done:i,resolve:r,reject:n}=oe(O,"Session update request expired without receiving any acknowledgement"),a=F(),l=fe().toString(),h=this.client.session.get(t).namespaces;return this.events.once(I("session_update",a),({error:p})=>{p?n(p):r()}),await this.client.session.update(t,{namespaces:s}),await this.sendRequest({topic:t,method:"wc_sessionUpdate",params:{namespaces:s},throwOnFailedPublish:!0,clientRpcId:a,relayRpcId:l}).catch(p=>{this.client.logger.error(p),this.client.session.update(t,{namespaces:h}),n(p)}),{acknowledged:i}}),c(this,"extend",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidExtend(e)}catch(a){throw this.client.logger.error("extend() -> isValidExtend() failed"),a}const{topic:t}=e,s=F(),{done:i,resolve:r,reject:n}=oe(O,"Session extend request expired without receiving any acknowledgement");return this.events.once(I("session_extend",s),({error:a})=>{a?n(a):r()}),await this.setExpiry(t,k(se)),this.sendRequest({topic:t,method:"wc_sessionExtend",params:{},clientRpcId:s,throwOnFailedPublish:!0}).catch(a=>{n(a)}),{acknowledged:i}}),c(this,"request",async e=>{this.isInitialized();try{await this.isValidRequest(e)}catch(g){throw this.client.logger.error("request() -> isValidRequest() failed"),g}const{chainId:t,request:s,topic:i,expiry:r=N.wc_sessionRequest.req.ttl}=e,n=this.client.session.get(i);n?.transportType===P.relay&&await this.confirmOnlineStateOrThrow();const a=F(),l=fe().toString(),{done:h,resolve:p,reject:y}=oe(r,"Request expired. Please try again.");this.events.once(I("session_request",a),({error:g,result:f})=>{g?y(g):p(f)});const d="wc_sessionRequest",u=this.getAppLinkIfEnabled(n.peer.metadata,n.transportType);if(u)return await this.sendRequest({clientRpcId:a,relayRpcId:l,topic:i,method:d,params:{request:b(E({},s),{expiryTimestamp:k(r)}),chainId:t},expiry:r,throwOnFailedPublish:!0,appLink:u}).catch(g=>y(g)),this.client.events.emit("session_request_sent",{topic:i,request:s,chainId:t,id:a}),await h();const w={request:b(E({},s),{expiryTimestamp:k(r)}),chainId:t};return await Promise.all([new Promise(async g=>{await this.sendRequest({clientRpcId:a,relayRpcId:l,topic:i,method:d,params:w,expiry:r,throwOnFailedPublish:!0,tvf:this.getTVFParams(a,w)}).catch(f=>y(f)),this.client.events.emit("session_request_sent",{topic:i,request:s,chainId:t,id:a}),g()}),new Promise(async g=>{var f;if(!((f=n.sessionConfig)!=null&&f.disableDeepLink)){const v=await jt(this.client.core.storage,$e);await Ft({id:a,topic:i,wcDeepLink:v})}g()}),h()]).then(g=>g[2])}),c(this,"respond",async e=>{var t,s;this.isInitialized();const i=this.client.core.eventClient.createEvent({properties:{topic:e?.topic||((s=(t=e?.response)==null?void 0:t.id)==null?void 0:s.toString()),trace:[L.session_request_response_started]}});try{await this.isValidRespond(e)}catch(p){throw i.addTrace(p?.message),i.setError(B.session_request_response_validation_failure),p}i.addTrace(L.session_request_response_validation_success);const{topic:r,response:n}=e,{id:a}=n,l=this.client.session.get(r);l.transportType===P.relay&&await this.confirmOnlineStateOrThrow();const h=this.getAppLinkIfEnabled(l.peer.metadata,l.transportType);try{i.addTrace(L.session_request_response_publish_started),H(n)?await this.sendResult({id:a,topic:r,result:n.result,throwOnFailedPublish:!0,appLink:h}):Q(n)&&await this.sendError({id:a,topic:r,error:n.error,appLink:h}),this.cleanupAfterResponse(e)}catch(p){throw i.addTrace(p?.message),i.setError(B.session_request_response_publish_failure),p}}),c(this,"ping",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidPing(e)}catch(s){throw this.client.logger.error("ping() -> isValidPing() failed"),s}const{topic:t}=e;if(this.client.session.keys.includes(t)){const s=F(),i=fe().toString(),{done:r,resolve:n,reject:a}=oe(O,"Ping request expired without receiving any acknowledgement");this.events.once(I("session_ping",s),({error:l})=>{l?a(l):n()}),await Promise.all([this.sendRequest({topic:t,method:"wc_sessionPing",params:{},throwOnFailedPublish:!0,clientRpcId:s,relayRpcId:i}),r()])}else this.client.core.pairing.pairings.keys.includes(t)&&(this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."),await this.client.core.pairing.ping({topic:t}))}),c(this,"emit",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow(),await this.isValidEmit(e);const{topic:t,event:s,chainId:i}=e,r=fe().toString(),n=F();await this.sendRequest({topic:t,method:"wc_sessionEvent",params:{event:s,chainId:i},throwOnFailedPublish:!0,relayRpcId:r,clientRpcId:n})}),c(this,"disconnect",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow(),await this.isValidDisconnect(e);const{topic:t}=e;if(this.client.session.keys.includes(t))await this.sendRequest({topic:t,method:"wc_sessionDelete",params:M("USER_DISCONNECTED"),throwOnFailedPublish:!0}),await this.deleteSession({topic:t,emitEvent:!1});else if(this.client.core.pairing.pairings.keys.includes(t))await this.client.core.pairing.disconnect({topic:t});else{const{message:s}=m("MISMATCHED_TOPIC",`Session or pairing topic not found: ${t}`);throw new Error(s)}}),c(this,"find",e=>(this.isInitialized(),this.client.session.getAll().filter(t=>Ht(t,e)))),c(this,"getPendingSessionRequests",()=>this.client.pendingRequest.getAll()),c(this,"authenticate",async(e,t)=>{var s;this.isInitialized(),this.isValidAuthenticate(e);const i=t&&this.client.core.linkModeSupportedApps.includes(t)&&((s=this.client.metadata.redirect)==null?void 0:s.linkMode),r=i?P.link_mode:P.relay;r===P.relay&&await this.confirmOnlineStateOrThrow();const{chains:n,statement:a="",uri:l,domain:h,nonce:p,type:y,exp:d,nbf:u,methods:w=[],expiry:g}=e,f=[...e.resources||[]],{topic:v,uri:T}=await this.client.core.pairing.create({methods:["wc_sessionAuthenticate"],transportType:r});this.client.logger.info({message:"Generated new pairing",pairing:{topic:v,uri:T}});const A=await this.client.core.crypto.generateKeyPair(),V=Ae(A);if(await Promise.all([this.client.auth.authKeys.set(_e,{responseTopic:V,publicKey:A}),this.client.auth.pairingTopics.set(V,{topic:V,pairingTopic:v})]),await this.client.core.relayer.subscribe(V,{transportType:r}),this.client.logger.info(`sending request to new pairing topic: ${v}`),w.length>0){const{namespace:C}=xe(n[0]);let D=Qt(C,"request",w);Ce(f)&&(D=zt(D,f.pop())),f.push(D)}const x=g&&g>N.wc_sessionAuthenticate.req.ttl?g:N.wc_sessionAuthenticate.req.ttl,U={authPayload:{type:y??"caip122",chains:n,statement:a,aud:l,domain:h,version:"1",nonce:p,iat:new Date().toISOString(),exp:d,nbf:u,resources:f},requester:{publicKey:A,metadata:this.client.metadata},expiryTimestamp:k(x)},z={eip155:{chains:n,methods:[...new Set(["personal_sign",...w])],events:["chainChanged","accountsChanged"]}},R={requiredNamespaces:{},optionalNamespaces:z,relays:[{protocol:"irn"}],pairingTopic:v,proposer:{publicKey:A,metadata:this.client.metadata},expiryTimestamp:k(N.wc_sessionPropose.req.ttl),id:F()},{done:q,resolve:ve,reject:ce}=oe(x,"Request expired"),Y=F(),ie=I("session_connect",R.id),le=I("session_request",Y),J=async({error:C,session:D})=>{this.events.off(le,pe),C?ce(C):D&&ve({session:D})},pe=async C=>{var D,je,Fe;if(await this.deletePendingAuthRequest(Y,{message:"fulfilled",code:0}),C.error){const ue=M("WC_METHOD_UNSUPPORTED","wc_sessionAuthenticate");return C.error.code===ue.code?void 0:(this.events.off(ie,J),ce(C.error.message))}await this.deleteProposal(R.id),this.events.off(ie,J);const{cacaos:He,responder:X}=C.result,Pe=[],Qe=[];for(const ue of He){await Je({cacao:ue,projectId:this.client.core.projectId})||(this.client.logger.error(ue,"Signature verification failed"),ce(M("SESSION_SETTLEMENT_FAILED","Signature verification failed")));const{p:Ne}=ue,Oe=Ce(Ne.resources),ze=[Xe(Ne.iss)],Tt=Be(Ne.iss);if(Oe){const be=We(Oe),qt=Ze(Oe);Pe.push(...be),ze.push(...qt)}for(const be of ze)Qe.push(`${be}:${Tt}`)}const de=await this.client.core.crypto.generateSharedKey(A,X.publicKey);let Se;Pe.length>0&&(Se={topic:de,acknowledged:!0,self:{publicKey:A,metadata:this.client.metadata},peer:X,controller:X.publicKey,expiry:k(se),requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:v,namespaces:et([...new Set(Pe)],[...new Set(Qe)]),transportType:r},await this.client.core.relayer.subscribe(de,{transportType:r}),await this.client.session.set(de,Se),v&&await this.client.core.pairing.updateMetadata({topic:v,metadata:X.metadata}),Se=this.client.session.get(de)),(D=this.client.metadata.redirect)!=null&&D.linkMode&&(je=X.metadata.redirect)!=null&&je.linkMode&&(Fe=X.metadata.redirect)!=null&&Fe.universal&&t&&(this.client.core.addLinkModeSupportedApp(X.metadata.redirect.universal),this.client.session.update(de,{transportType:P.link_mode})),ve({auths:He,session:Se})};this.events.once(ie,J),this.events.once(le,pe);let he;try{if(i){const C=ae("wc_sessionAuthenticate",U,Y);this.client.core.history.set(v,C);const D=await this.client.core.crypto.encode("",C,{type:Yt,encoding:ye});he=Ee(t,v,D)}else await Promise.all([this.sendRequest({topic:v,method:"wc_sessionAuthenticate",params:U,expiry:e.expiry,throwOnFailedPublish:!0,clientRpcId:Y}),this.sendRequest({topic:v,method:"wc_sessionPropose",params:R,expiry:N.wc_sessionPropose.req.ttl,throwOnFailedPublish:!0,clientRpcId:R.id})])}catch(C){throw this.events.off(ie,J),this.events.off(le,pe),C}return await this.setProposal(R.id,R),await this.setAuthRequest(Y,{request:b(E({},U),{verifyContext:{}}),pairingTopic:v,transportType:r}),{uri:he??T,response:q}}),c(this,"approveSessionAuthenticate",async e=>{const{id:t,auths:s}=e,i=this.client.core.eventClient.createEvent({properties:{topic:t.toString(),trace:[W.authenticated_session_approve_started]}});try{this.isInitialized()}catch(g){throw i.setError(ge.no_internet_connection),g}const r=this.getPendingAuthRequest(t);if(!r)throw i.setError(ge.authenticated_session_pending_request_not_found),new Error(`Could not find pending auth request with id ${t}`);const n=r.transportType||P.relay;n===P.relay&&await this.confirmOnlineStateOrThrow();const a=r.requester.publicKey,l=await this.client.core.crypto.generateKeyPair(),h=Ae(a),p={type:ke,receiverPublicKey:a,senderPublicKey:l},y=[],d=[];for(const g of s){if(!await Je({cacao:g,projectId:this.client.core.projectId})){i.setError(ge.invalid_cacao);const V=M("SESSION_SETTLEMENT_FAILED","Signature verification failed");throw await this.sendError({id:t,topic:h,error:V,encodeOpts:p}),new Error(V.message)}i.addTrace(W.cacaos_verified);const{p:f}=g,v=Ce(f.resources),T=[Xe(f.iss)],A=Be(f.iss);if(v){const V=We(v),x=Ze(v);y.push(...V),T.push(...x)}for(const V of T)d.push(`${V}:${A}`)}const u=await this.client.core.crypto.generateSharedKey(l,a);i.addTrace(W.create_authenticated_session_topic);let w;if(y?.length>0){w={topic:u,acknowledged:!0,self:{publicKey:l,metadata:this.client.metadata},peer:{publicKey:a,metadata:r.requester.metadata},controller:a,expiry:k(se),authentication:s,requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:r.pairingTopic,namespaces:et([...new Set(y)],[...new Set(d)]),transportType:n},i.addTrace(W.subscribing_authenticated_session_topic);try{await this.client.core.relayer.subscribe(u,{transportType:n})}catch(g){throw i.setError(ge.subscribe_authenticated_session_topic_failure),g}i.addTrace(W.subscribe_authenticated_session_topic_success),await this.client.session.set(u,w),i.addTrace(W.store_authenticated_session),await this.client.core.pairing.updateMetadata({topic:r.pairingTopic,metadata:r.requester.metadata})}i.addTrace(W.publishing_authenticated_session_approve);try{await this.sendResult({topic:h,id:t,result:{cacaos:s,responder:{publicKey:l,metadata:this.client.metadata}},encodeOpts:p,throwOnFailedPublish:!0,appLink:this.getAppLinkIfEnabled(r.requester.metadata,n)})}catch(g){throw i.setError(ge.authenticated_session_approve_publish_failure),g}return await this.client.auth.requests.delete(t,{message:"fulfilled",code:0}),await this.client.core.pairing.activate({topic:r.pairingTopic}),this.client.core.eventClient.deleteEvent({eventId:i.eventId}),{session:w}}),c(this,"rejectSessionAuthenticate",async e=>{this.isInitialized();const{id:t,reason:s}=e,i=this.getPendingAuthRequest(t);if(!i)throw new Error(`Could not find pending auth request with id ${t}`);i.transportType===P.relay&&await this.confirmOnlineStateOrThrow();const r=i.requester.publicKey,n=await this.client.core.crypto.generateKeyPair(),a=Ae(r),l={type:ke,receiverPublicKey:r,senderPublicKey:n};await this.sendError({id:t,topic:a,error:s,encodeOpts:l,rpcOpts:N.wc_sessionAuthenticate.reject,appLink:this.getAppLinkIfEnabled(i.requester.metadata,i.transportType)}),await this.client.auth.requests.delete(t,{message:"rejected",code:0}),await this.deleteProposal(t)}),c(this,"formatAuthMessage",e=>{this.isInitialized();const{request:t,iss:s}=e;return Jt(t,s)}),c(this,"processRelayMessageCache",()=>{setTimeout(async()=>{if(this.relayMessageCache.length!==0)for(;this.relayMessageCache.length>0;)try{const e=this.relayMessageCache.shift();e&&await this.onRelayMessage(e)}catch(e){this.client.logger.error(e)}},50)}),c(this,"cleanupDuplicatePairings",async e=>{if(e.pairingTopic)try{const t=this.client.core.pairing.pairings.get(e.pairingTopic),s=this.client.core.pairing.pairings.getAll().filter(i=>{var r,n;return((r=i.peerMetadata)==null?void 0:r.url)&&((n=i.peerMetadata)==null?void 0:n.url)===e.peer.metadata.url&&i.topic&&i.topic!==t.topic});if(s.length===0)return;this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`),await Promise.all(s.map(i=>this.client.core.pairing.disconnect({topic:i.topic}))),this.client.logger.info("Duplicate pairings clean up finished")}catch(t){this.client.logger.error(t)}}),c(this,"deleteSession",async e=>{var t;const{topic:s,expirerHasDeleted:i=!1,emitEvent:r=!0,id:n=0}=e,{self:a}=this.client.session.get(s);await this.client.core.relayer.unsubscribe(s),await this.client.session.delete(s,M("USER_DISCONNECTED")),this.addToRecentlyDeleted(s,"session"),this.client.core.crypto.keychain.has(a.publicKey)&&await this.client.core.crypto.deleteKeyPair(a.publicKey),this.client.core.crypto.keychain.has(s)&&await this.client.core.crypto.deleteSymKey(s),i||this.client.core.expirer.del(s),this.client.core.storage.removeItem($e).catch(l=>this.client.logger.warn(l)),s===((t=this.sessionRequestQueue.queue[0])==null?void 0:t.topic)&&(this.sessionRequestQueue.state=K.idle),await Promise.all(this.getPendingSessionRequests().filter(l=>l.topic===s).map(l=>this.deletePendingSessionRequest(l.id,M("USER_DISCONNECTED")))),r&&this.client.events.emit("session_delete",{id:n,topic:s})}),c(this,"deleteProposal",async(e,t)=>{if(t)try{const s=this.client.proposal.get(e),i=this.client.core.eventClient.getEvent({topic:s.pairingTopic});i?.setError(B.proposal_expired)}catch{}await Promise.all([this.client.proposal.delete(e,M("USER_DISCONNECTED")),t?Promise.resolve():this.client.core.expirer.del(e)]),this.addToRecentlyDeleted(e,"proposal")}),c(this,"deletePendingSessionRequest",async(e,t,s=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,t),s?Promise.resolve():this.client.core.expirer.del(e)]),this.addToRecentlyDeleted(e,"request"),this.sessionRequestQueue.queue=this.sessionRequestQueue.queue.filter(i=>i.id!==e),s&&(this.sessionRequestQueue.state=K.idle,this.client.events.emit("session_request_expire",{id:e}))}),c(this,"deletePendingAuthRequest",async(e,t,s=!1)=>{await Promise.all([this.client.auth.requests.delete(e,t),s?Promise.resolve():this.client.core.expirer.del(e)])}),c(this,"setExpiry",async(e,t)=>{this.client.session.keys.includes(e)&&(this.client.core.expirer.set(e,t),await this.client.session.update(e,{expiry:t}))}),c(this,"setProposal",async(e,t)=>{this.client.core.expirer.set(e,k(N.wc_sessionPropose.req.ttl)),await this.client.proposal.set(e,t)}),c(this,"setAuthRequest",async(e,t)=>{const{request:s,pairingTopic:i,transportType:r=P.relay}=t;this.client.core.expirer.set(e,s.expiryTimestamp),await this.client.auth.requests.set(e,{authPayload:s.authPayload,requester:s.requester,expiryTimestamp:s.expiryTimestamp,id:e,pairingTopic:i,verifyContext:s.verifyContext,transportType:r})}),c(this,"setPendingSessionRequest",async e=>{const{id:t,topic:s,params:i,verifyContext:r}=e,n=i.request.expiryTimestamp||k(N.wc_sessionRequest.req.ttl);this.client.core.expirer.set(t,n),await this.client.pendingRequest.set(t,{id:t,topic:s,params:i,verifyContext:r})}),c(this,"sendRequest",async e=>{const{topic:t,method:s,params:i,expiry:r,relayRpcId:n,clientRpcId:a,throwOnFailedPublish:l,appLink:h,tvf:p,publishOpts:y={}}=e,d=ae(s,i,a);let u;const w=!!h;try{const v=w?ye:Z;u=await this.client.core.crypto.encode(t,d,{encoding:v})}catch(v){throw await this.cleanup(),this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`),v}let g;if(wt.includes(s)){const v=G(JSON.stringify(d)),T=G(u);g=await this.client.core.verify.register({id:T,decryptedId:v})}const f=E(E({},N[s].req),y);if(f.attestation=g,r&&(f.ttl=r),n&&(f.id=n),this.client.core.history.set(t,d),w){const v=Ee(h,t,u);await global.Linking.openURL(v,this.client.name)}else f.tvf=b(E({},p),{correlationId:d.id}),l?(f.internal=b(E({},f.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(t,u,f)):this.client.core.relayer.publish(t,u,f).catch(v=>this.client.logger.error(v));return d.id}),c(this,"sendProposeSession",async e=>{const{proposal:t,publishOpts:s}=e,i=ae("wc_sessionPropose",t,t.id);this.client.core.history.set(t.pairingTopic,i);const r=await this.client.core.crypto.encode(t.pairingTopic,i,{encoding:Z}),n=G(JSON.stringify(i)),a=G(r),l=await this.client.core.verify.register({id:a,decryptedId:n});await this.client.core.relayer.publishCustom({payload:{pairingTopic:t.pairingTopic,sessionProposal:r},opts:b(E({},s),{publishMethod:"wc_proposeSession",attestation:l})})}),c(this,"sendApproveSession",async e=>{const{sessionTopic:t,pairingProposalResponse:s,proposal:i,sessionSettleRequest:r,publishOpts:n}=e,a=ht(i.id,s),l=await this.client.core.crypto.encode(i.pairingTopic,a,{encoding:Z}),h=ae("wc_sessionSettle",r,n?.id),p=await this.client.core.crypto.encode(t,h,{encoding:Z});this.client.core.history.set(t,h),await this.client.core.relayer.publishCustom({payload:{sessionTopic:t,pairingTopic:i.pairingTopic,sessionProposalResponse:l,sessionSettlementRequest:p},opts:b(E({},n),{publishMethod:"wc_approveSession"})})}),c(this,"sendResult",async e=>{const{id:t,topic:s,result:i,throwOnFailedPublish:r,encodeOpts:n,appLink:a}=e,l=ht(t,i);let h;const p=a&&typeof(global==null?void 0:global.Linking)<"u";try{const u=p?ye:Z;h=await this.client.core.crypto.encode(s,l,b(E({},n||{}),{encoding:u}))}catch(u){throw await this.cleanup(),this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`),u}let y,d;try{y=await this.client.core.history.get(s,t);const u=y.request;try{d=this.getTVFParams(t,u.params,i)}catch(w){this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${w?.message}`)}}catch(u){throw this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`),u}if(p){const u=Ee(a,s,h);await global.Linking.openURL(u,this.client.name)}else{const u=y.request.method,w=N[u].res;w.tvf=b(E({},d),{correlationId:t}),r?(w.internal=b(E({},w.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(s,h,w)):this.client.core.relayer.publish(s,h,w).catch(g=>this.client.logger.error(g))}await this.client.core.history.resolve(l)}),c(this,"sendError",async e=>{const{id:t,topic:s,error:i,encodeOpts:r,rpcOpts:n,appLink:a}=e,l=Rs(t,i);let h;const p=a&&typeof(global==null?void 0:global.Linking)<"u";try{const d=p?ye:Z;h=await this.client.core.crypto.encode(s,l,b(E({},r||{}),{encoding:d}))}catch(d){throw await this.cleanup(),this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`),d}let y;try{y=await this.client.core.history.get(s,t)}catch(d){throw this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`),d}if(p){const d=Ee(a,s,h);await global.Linking.openURL(d,this.client.name)}else{const d=y.request.method,u=n||N[d].res;this.client.core.relayer.publish(s,h,u)}await this.client.core.history.resolve(l)}),c(this,"cleanup",async()=>{const e=[],t=[];this.client.session.getAll().forEach(s=>{let i=!1;ne(s.expiry)&&(i=!0),this.client.core.crypto.keychain.has(s.topic)||(i=!0),i&&e.push(s.topic)}),this.client.proposal.getAll().forEach(s=>{ne(s.expiryTimestamp)&&t.push(s.id)}),await Promise.all([...e.map(s=>this.deleteSession({topic:s})),...t.map(s=>this.deleteProposal(s))])}),c(this,"onProviderMessageEvent",async e=>{!this.initialized||this.relayMessageCache.length>0?this.relayMessageCache.push(e):await this.onRelayMessage(e)}),c(this,"onRelayEventRequest",async e=>{this.requestQueue.queue.push(e),await this.processRequestsQueue()}),c(this,"processRequestsQueue",async()=>{if(this.requestQueue.state===K.active){this.client.logger.info("Request queue already active, skipping...");return}for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`);this.requestQueue.queue.length>0;){this.requestQueue.state=K.active;const e=this.requestQueue.queue.shift();if(e)try{await this.processRequest(e)}catch(t){this.client.logger.warn(t)}}this.requestQueue.state=K.idle}),c(this,"processRequest",async e=>{const{topic:t,payload:s,attestation:i,transportType:r,encryptedId:n}=e,a=s.method;if(!this.shouldIgnorePairingRequest({topic:t,requestMethod:a}))switch(a){case"wc_sessionPropose":return await this.onSessionProposeRequest({topic:t,payload:s,attestation:i,encryptedId:n});case"wc_sessionSettle":return await this.onSessionSettleRequest(t,s);case"wc_sessionUpdate":return await this.onSessionUpdateRequest(t,s);case"wc_sessionExtend":return await this.onSessionExtendRequest(t,s);case"wc_sessionPing":return await this.onSessionPingRequest(t,s);case"wc_sessionDelete":return await this.onSessionDeleteRequest(t,s);case"wc_sessionRequest":return await this.onSessionRequest({topic:t,payload:s,attestation:i,encryptedId:n,transportType:r});case"wc_sessionEvent":return await this.onSessionEventRequest(t,s);case"wc_sessionAuthenticate":return await this.onSessionAuthenticateRequest({topic:t,payload:s,attestation:i,encryptedId:n,transportType:r});default:return this.client.logger.info(`Unsupported request method ${a}`)}}),c(this,"onRelayEventResponse",async e=>{const{topic:t,payload:s,transportType:i}=e,r=(await this.client.core.history.get(t,s.id)).request.method;switch(r){case"wc_sessionPropose":return this.onSessionProposeResponse(t,s,i);case"wc_sessionSettle":return this.onSessionSettleResponse(t,s);case"wc_sessionUpdate":return this.onSessionUpdateResponse(t,s);case"wc_sessionExtend":return this.onSessionExtendResponse(t,s);case"wc_sessionPing":return this.onSessionPingResponse(t,s);case"wc_sessionRequest":return this.onSessionRequestResponse(t,s);case"wc_sessionAuthenticate":return this.onSessionAuthenticateResponse(t,s);default:return this.client.logger.info(`Unsupported response method ${r}`)}}),c(this,"onRelayEventUnknownPayload",e=>{const{topic:t}=e,{message:s}=m("MISSING_OR_INVALID",`Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);throw new Error(s)}),c(this,"shouldIgnorePairingRequest",e=>{const{topic:t,requestMethod:s}=e,i=this.expectedPairingMethodMap.get(t);return!i||i.includes(s)?!1:!!(i.includes("wc_sessionAuthenticate")&&this.client.events.listenerCount("session_authenticate")>0)}),c(this,"onSessionProposeRequest",async e=>{const{topic:t,payload:s,attestation:i,encryptedId:r}=e,{params:n,id:a}=s;try{const l=this.client.core.eventClient.getEvent({topic:t});this.client.events.listenerCount("session_proposal")===0&&(console.warn("No listener for session_proposal event"),l?.setError(xt.proposal_listener_not_found)),this.isValidConnect(E({},s.params));const h=n.expiryTimestamp||k(N.wc_sessionPropose.req.ttl),p=E({id:a,pairingTopic:t,expiryTimestamp:h,attestation:i,encryptedId:r},n);await this.setProposal(a,p);const y=await this.getVerifyContext({attestationId:i,hash:G(JSON.stringify(s)),encryptedId:r,metadata:p.proposer.metadata});l?.addTrace(Ct.emit_session_proposal),this.client.events.emit("session_proposal",{id:a,params:p,verifyContext:y})}catch(l){await this.sendError({id:a,topic:t,error:l,rpcOpts:N.wc_sessionPropose.autoReject}),this.client.logger.error(l)}}),c(this,"onSessionProposeResponse",async(e,t,s)=>{const{id:i}=t;if(H(t)){const{result:r}=t;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:r});const n=this.client.proposal.get(i);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:n});const a=n.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:a});const l=r.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:l});const h=await this.client.core.crypto.generateSharedKey(a,l);this.pendingSessions.set(i,{sessionTopic:h,pairingTopic:e,proposalId:i,publicKey:a});const p=await this.client.core.relayer.subscribe(h,{transportType:s});this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:p}),await this.client.core.pairing.activate({topic:e})}else if(Q(t)){await this.deleteProposal(i);const r=I("session_connect",i);if(this.events.listenerCount(r)===0)throw new Error(`emitting ${r} without any listeners, 954`);this.events.emit(r,{error:t.error})}}),c(this,"onSessionSettleRequest",async(e,t)=>{const{id:s,params:i}=t;try{this.isValidSessionSettleRequest(i);const{relay:r,controller:n,expiry:a,namespaces:l,sessionProperties:h,scopedProperties:p,sessionConfig:y,proposalRequestsResponses:d}=t.params,u=[...this.pendingSessions.values()].find(f=>f.sessionTopic===e);if(!u)return this.client.logger.error(`Pending session not found for topic ${e}`);const w=this.client.proposal.get(u.proposalId),g=b(E(E(E({topic:e,relay:r,expiry:a,namespaces:l,acknowledged:!0,pairingTopic:u.pairingTopic,requiredNamespaces:w.requiredNamespaces,optionalNamespaces:w.optionalNamespaces,controller:n.publicKey,self:{publicKey:u.publicKey,metadata:this.client.metadata},peer:{publicKey:n.publicKey,metadata:n.metadata}},h&&{sessionProperties:h}),p&&{scopedProperties:p}),y&&{sessionConfig:y}),{transportType:P.relay,authentication:d?.authentication,walletPayResult:d?.walletPay});await this.client.session.set(g.topic,g),await this.setExpiry(g.topic,g.expiry),await this.client.core.pairing.updateMetadata({topic:u.pairingTopic,metadata:g.peer.metadata}),this.pendingSessions.delete(u.proposalId),this.deleteProposal(u.proposalId,!1),this.cleanupDuplicatePairings(g),await this.sendResult({id:t.id,topic:e,throwOnFailedPublish:!0,result:!0}),this.client.events.emit("session_connect",{session:g}),this.events.emit(I("session_connect",u.proposalId),{session:g})}catch(r){await this.sendError({id:s,topic:e,error:r}),this.client.logger.error(r)}}),c(this,"onSessionSettleResponse",async(e,t)=>{const{id:s}=t;H(t)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(I("session_approve",s),{})):Q(t)&&(await this.client.session.delete(e,M("USER_DISCONNECTED")),this.events.emit(I("session_approve",s),{error:t.error}))}),c(this,"onSessionUpdateRequest",async(e,t)=>{const{params:s,id:i}=t;try{const r=`${e}_session_update`,n=me.get(r);if(n&&this.isRequestOutOfSync(n,i)){this.client.logger.warn(`Discarding out of sync request - ${i}`),this.sendError({id:i,topic:e,error:M("INVALID_UPDATE_REQUEST")});return}this.isValidUpdate(E({topic:e},s));try{me.set(r,i),await this.client.session.update(e,{namespaces:s.namespaces}),await this.sendResult({id:i,topic:e,result:!0})}catch(a){throw me.delete(r),a}this.client.events.emit("session_update",{id:i,topic:e,params:s})}catch(r){await this.sendError({id:i,topic:e,error:r}),this.client.logger.error(r)}}),c(this,"isRequestOutOfSync",(e,t)=>t.toString().slice(0,-3)<e.toString().slice(0,-3)),c(this,"onSessionUpdateResponse",(e,t)=>{const{id:s}=t,i=I("session_update",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);H(t)?this.events.emit(I("session_update",s),{}):Q(t)&&this.events.emit(I("session_update",s),{error:t.error})}),c(this,"onSessionExtendRequest",async(e,t)=>{const{id:s}=t;try{this.isValidExtend({topic:e}),await this.setExpiry(e,k(se)),await this.sendResult({id:s,topic:e,result:!0}),this.client.events.emit("session_extend",{id:s,topic:e})}catch(i){await this.sendError({id:s,topic:e,error:i}),this.client.logger.error(i)}}),c(this,"onSessionExtendResponse",(e,t)=>{const{id:s}=t,i=I("session_extend",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);H(t)?this.events.emit(I("session_extend",s),{}):Q(t)&&this.events.emit(I("session_extend",s),{error:t.error})}),c(this,"onSessionPingRequest",async(e,t)=>{const{id:s}=t;try{this.isValidPing({topic:e}),await this.sendResult({id:s,topic:e,result:!0,throwOnFailedPublish:!0}),this.client.events.emit("session_ping",{id:s,topic:e})}catch(i){await this.sendError({id:s,topic:e,error:i}),this.client.logger.error(i)}}),c(this,"onSessionPingResponse",(e,t)=>{const{id:s}=t,i=I("session_ping",s);setTimeout(()=>{if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners 2176`);H(t)?this.events.emit(I("session_ping",s),{}):Q(t)&&this.events.emit(I("session_ping",s),{error:t.error})},500)}),c(this,"onSessionDeleteRequest",async(e,t)=>{const{id:s}=t;try{await this.isValidDisconnect({topic:e,reason:t.params}),this.cleanupPendingSentRequestsForTopic({topic:e,error:M("USER_DISCONNECTED")}),await this.deleteSession({topic:e,id:s})}catch(i){this.client.logger.error(i)}}),c(this,"onSessionRequest",async e=>{var t,s,i;const{topic:r,payload:n,attestation:a,encryptedId:l,transportType:h}=e,{id:p,params:y}=n;try{await this.isValidRequest(E({topic:r},y));const d=this.client.session.get(r),u=await this.getVerifyContext({attestationId:a,hash:G(JSON.stringify(ae("wc_sessionRequest",y,p))),encryptedId:l,metadata:d.peer.metadata,transportType:h}),w={id:p,topic:r,params:y,verifyContext:u};await this.setPendingSessionRequest(w),h===P.link_mode&&(t=d.peer.metadata.redirect)!=null&&t.universal&&this.client.core.addLinkModeSupportedApp((s=d.peer.metadata.redirect)==null?void 0:s.universal),(i=this.client.signConfig)!=null&&i.disableRequestQueue?this.emitSessionRequest(w):(this.addSessionRequestToSessionRequestQueue(w),this.processSessionRequestQueue())}catch(d){await this.sendError({id:p,topic:r,error:d}),this.client.logger.error(d)}}),c(this,"onSessionRequestResponse",(e,t)=>{const{id:s}=t,i=I("session_request",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);H(t)?this.events.emit(I("session_request",s),{result:t.result}):Q(t)&&this.events.emit(I("session_request",s),{error:t.error})}),c(this,"onSessionEventRequest",async(e,t)=>{const{id:s,params:i}=t;try{const r=`${e}_session_event_${i.event.name}`,n=me.get(r);if(n&&this.isRequestOutOfSync(n,s)){this.client.logger.info(`Discarding out of sync request - ${s}`);return}this.isValidEmit(E({topic:e},i)),this.client.events.emit("session_event",{id:s,topic:e,params:i}),me.set(r,s)}catch(r){await this.sendError({id:s,topic:e,error:r}),this.client.logger.error(r)}}),c(this,"onSessionAuthenticateResponse",(e,t)=>{const{id:s}=t;this.client.logger.trace({type:"method",method:"onSessionAuthenticateResponse",topic:e,payload:t}),H(t)?this.events.emit(I("session_request",s),{result:t.result}):Q(t)&&this.events.emit(I("session_request",s),{error:t.error})}),c(this,"onSessionAuthenticateRequest",async e=>{var t;const{topic:s,payload:i,attestation:r,encryptedId:n,transportType:a}=e;try{const{requester:l,authPayload:h,expiryTimestamp:p}=i.params,y=await this.getVerifyContext({attestationId:r,hash:G(JSON.stringify(i)),encryptedId:n,metadata:l.metadata,transportType:a}),d={requester:l,pairingTopic:s,id:i.id,authPayload:h,verifyContext:y,expiryTimestamp:p};await this.setAuthRequest(i.id,{request:d,pairingTopic:s,transportType:a}),a===P.link_mode&&(t=l.metadata.redirect)!=null&&t.universal&&this.client.core.addLinkModeSupportedApp(l.metadata.redirect.universal),this.client.events.emit("session_authenticate",{topic:s,params:i.params,id:i.id,verifyContext:y})}catch(l){this.client.logger.error(l);const h=i.params.requester.publicKey,p=await this.client.core.crypto.generateKeyPair(),y=this.getAppLinkIfEnabled(i.params.requester.metadata,a),d={type:ke,receiverPublicKey:h,senderPublicKey:p};await this.sendError({id:i.id,topic:s,error:l,encodeOpts:d,rpcOpts:N.wc_sessionAuthenticate.autoReject,appLink:y})}}),c(this,"addSessionRequestToSessionRequestQueue",e=>{this.sessionRequestQueue.queue.push(e)}),c(this,"cleanupAfterResponse",e=>{this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0}),setTimeout(()=>{this.sessionRequestQueue.state=K.idle,this.processSessionRequestQueue()},pt(this.requestQueueDelay))}),c(this,"cleanupPendingSentRequestsForTopic",({topic:e,error:t})=>{const s=this.client.core.history.pending;s.length>0&&s.filter(i=>i.topic===e&&i.request.method==="wc_sessionRequest").forEach(i=>{this.events.emit(I("session_request",i.request.id),{error:t})})}),c(this,"processSessionRequestQueue",()=>{if(this.sessionRequestQueue.state===K.active){this.client.logger.info("session request queue is already active.");return}const e=this.sessionRequestQueue.queue[0];if(!e){this.client.logger.info("session request queue is empty.");return}try{this.emitSessionRequest(e)}catch(t){this.client.logger.error(t)}}),c(this,"emitSessionRequest",e=>{if(this.emittedSessionRequests.has(e.id)){this.client.logger.warn({id:e.id},`Skipping emitting \`session_request\` event for duplicate request. id: ${e.id}`);return}this.sessionRequestQueue.state=K.active,this.emittedSessionRequests.add(e.id),this.client.events.emit("session_request",e)}),c(this,"onPairingCreated",e=>{if(e.methods&&this.expectedPairingMethodMap.set(e.topic,e.methods),e.active)return;const t=this.client.proposal.getAll().find(s=>s.pairingTopic===e.topic);t&&this.onSessionProposeRequest({topic:e.topic,payload:ae("wc_sessionPropose",b(E({},t),{requiredNamespaces:t.requiredNamespaces,optionalNamespaces:t.optionalNamespaces,relays:t.relays,proposer:t.proposer,sessionProperties:t.sessionProperties,scopedProperties:t.scopedProperties}),t.id),attestation:t.attestation,encryptedId:t.encryptedId})}),c(this,"isValidConnect",async e=>{if(!$(e)){const{message:l}=m("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(l)}const{pairingTopic:t,requiredNamespaces:s,optionalNamespaces:i,sessionProperties:r,scopedProperties:n,relays:a}=e;if(te(t)||await this.isValidPairingTopic(t),!Xt(a,!0)){const{message:l}=m("MISSING_OR_INVALID",`connect() relays: ${a}`);throw new Error(l)}if(s&&!te(s)&&tt(s)!==0){const l="requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";["fatal","error","silent"].includes(this.client.logger.level)?console.warn(l):this.client.logger.warn(l),this.validateNamespaces(s,"requiredNamespaces")}if(i&&!te(i)&&tt(i)!==0&&this.validateNamespaces(i,"optionalNamespaces"),r&&!te(r)&&this.validateSessionProps(r,"sessionProperties"),n&&!te(n)){this.validateSessionProps(n,"scopedProperties");const l=Object.keys(s||{}).concat(Object.keys(i||{}));if(!Object.keys(n).every(h=>l.includes(h.split(":")[0])))throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n)}, required/optional namespaces: ${JSON.stringify(l)}`)}}),c(this,"validateNamespaces",(e,t)=>{const s=Bt(e,"connect()",t);if(s)throw new Error(s.message)}),c(this,"isValidApprove",async e=>{if(!$(e))throw new Error(m("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:t,namespaces:s,relayProtocol:i,sessionProperties:r,scopedProperties:n}=e;this.checkRecentlyDeleted(t),await this.isValidProposalId(t);const a=this.client.proposal.get(t),l=Ve(s,"approve()");if(l)throw new Error(l.message);const h=st(a.requiredNamespaces,s,"approve()");if(h)throw new Error(h.message);if(!ee(i,!0)){const{message:p}=m("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(p)}if(r&&!te(r)&&this.validateSessionProps(r,"sessionProperties"),n&&!te(n)){this.validateSessionProps(n,"scopedProperties");const p=new Set(Object.keys(s));if(!Object.keys(n).every(y=>p.has(y.split(":")[0])))throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n)}, approved namespaces: ${Array.from(p).join(", ")}`)}}),c(this,"isValidReject",async e=>{if(!$(e)){const{message:i}=m("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(i)}const{id:t,reason:s}=e;if(this.checkRecentlyDeleted(t),await this.isValidProposalId(t),!Wt(s)){const{message:i}=m("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(s)}`);throw new Error(i)}}),c(this,"isValidSessionSettleRequest",e=>{if(!$(e)){const{message:l}=m("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(l)}const{relay:t,controller:s,namespaces:i,expiry:r}=e;if(!Zt(t)){const{message:l}=m("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(l)}const n=es(s,"onSessionSettleRequest()");if(n)throw new Error(n.message);const a=Ve(i,"onSessionSettleRequest()");if(a)throw new Error(a.message);if(ne(r)){const{message:l}=m("EXPIRED","onSessionSettleRequest()");throw new Error(l)}}),c(this,"isValidUpdate",async e=>{if(!$(e)){const{message:a}=m("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(a)}const{topic:t,namespaces:s}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t);const i=this.client.session.get(t),r=Ve(s,"update()");if(r)throw new Error(r.message);const n=st(i.requiredNamespaces,s,"update()");if(n)throw new Error(n.message)}),c(this,"isValidExtend",async e=>{if(!$(e)){const{message:s}=m("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(s)}const{topic:t}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t)}),c(this,"isValidRequest",async e=>{if(!$(e)){const{message:a}=m("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(a)}const{topic:t,request:s,chainId:i,expiry:r}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t);const{namespaces:n}=this.client.session.get(t);if(!it(n,i)){const{message:a}=m("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(a)}if(!ts(s)){const{message:a}=m("MISSING_OR_INVALID",`request() ${JSON.stringify(s)}`);throw new Error(a)}if(!ss(n,i,s.method)){const{message:a}=m("MISSING_OR_INVALID",`request() method: ${s.method}`);throw new Error(a)}this.validateRequestExpiry(r)}),c(this,"isValidRespond",async e=>{var t;if(!$(e)){const{message:n}=m("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(n)}const{topic:s,response:i}=e;try{await this.isValidSessionTopic(s)}catch(n){throw(t=e?.response)!=null&&t.id&&this.cleanupAfterResponse(e),n}if(!is(i)){const{message:n}=m("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(i)}`);throw new Error(n)}const r=this.client.pendingRequest.get(i.id);if(r.topic!==s){const{message:n}=m("MISMATCHED_TOPIC",`Request response topic mismatch. reqId: ${i.id}, expected topic: ${r.topic}, received topic: ${s}`);throw new Error(n)}}),c(this,"isValidPing",async e=>{if(!$(e)){const{message:s}=m("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(s)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}),c(this,"isValidEmit",async e=>{if(!$(e)){const{message:n}=m("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(n)}const{topic:t,event:s,chainId:i}=e;await this.isValidSessionTopic(t);const{namespaces:r}=this.client.session.get(t);if(!it(r,i)){const{message:n}=m("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(n)}if(!rs(s)){const{message:n}=m("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(n)}if(!ns(r,i,s.name)){const{message:n}=m("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(n)}}),c(this,"isValidDisconnect",async e=>{if(!$(e)){const{message:s}=m("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(s)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}),c(this,"isValidAuthenticate",e=>{const{chains:t,uri:s,domain:i,nonce:r}=e;if(!Array.isArray(t)||t.length===0)throw new Error("chains is required and must be a non-empty array");if(!ee(s,!1))throw new Error("uri is required parameter");if(!ee(i,!1))throw new Error("domain is required parameter");if(!ee(r,!1))throw new Error("nonce is required parameter");if([...new Set(t.map(a=>xe(a).namespace))].length>1)throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");const{namespace:n}=xe(t[0]);if(n!=="eip155")throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.")}),c(this,"getVerifyContext",async e=>{const{attestationId:t,hash:s,encryptedId:i,metadata:r,transportType:n}=e,a={verified:{verifyUrl:r.verifyUrl||Vt,validation:"UNKNOWN",origin:r.url||""}};try{if(n===P.link_mode){const h=this.getAppLinkIfEnabled(r,n);return a.verified.validation=h&&new URL(h).origin===new URL(r.url).origin?"VALID":"INVALID",a}const l=await this.client.core.verify.resolve({attestationId:t,hash:s,encryptedId:i,verifyUrl:r.verifyUrl});l&&(a.verified.origin=l.origin,a.verified.isScam=l.isScam,a.verified.validation=l.origin===new URL(r.url).origin?"VALID":"INVALID")}catch(l){this.client.logger.warn(l)}return this.client.logger.debug(`Verify context: ${JSON.stringify(a)}`),a}),c(this,"validateSessionProps",(e,t)=>{Object.values(e).forEach((s,i)=>{if(s==null){const{message:r}=m("MISSING_OR_INVALID",`${t} must contain an existing value for each key. Received: ${s} for key ${Object.keys(e)[i]}`);throw new Error(r)}})}),c(this,"getPendingAuthRequest",e=>{const t=this.client.auth.requests.get(e);return typeof t=="object"?t:void 0}),c(this,"addToRecentlyDeleted",(e,t)=>{if(this.recentlyDeletedMap.set(e,t),this.recentlyDeletedMap.size>=this.recentlyDeletedLimit){let s=0;const i=this.recentlyDeletedLimit/2;for(const r of this.recentlyDeletedMap.keys()){if(s++>=i)break;this.recentlyDeletedMap.delete(r)}}}),c(this,"checkRecentlyDeleted",e=>{const t=this.recentlyDeletedMap.get(e);if(t){const{message:s}=m("MISSING_OR_INVALID",`Record was recently deleted - ${t}: ${e}`);throw new Error(s)}}),c(this,"isLinkModeEnabled",(e,t)=>{var s,i,r,n,a,l,h,p,y;return!e||t!==P.link_mode?!1:((i=(s=this.client.metadata)==null?void 0:s.redirect)==null?void 0:i.linkMode)===!0&&((n=(r=this.client.metadata)==null?void 0:r.redirect)==null?void 0:n.universal)!==void 0&&((l=(a=this.client.metadata)==null?void 0:a.redirect)==null?void 0:l.universal)!==""&&((h=e?.redirect)==null?void 0:h.universal)!==void 0&&((p=e?.redirect)==null?void 0:p.universal)!==""&&((y=e?.redirect)==null?void 0:y.linkMode)===!0&&this.client.core.linkModeSupportedApps.includes(e.redirect.universal)&&typeof(global==null?void 0:global.Linking)<"u"}),c(this,"getAppLinkIfEnabled",(e,t)=>{var s;return this.isLinkModeEnabled(e,t)?(s=e?.redirect)==null?void 0:s.universal:void 0}),c(this,"handleLinkModeMessage",({url:e})=>{if(!e||!e.includes("wc_ev")||!e.includes("topic"))return;const t=rt(e,"topic")||"",s=decodeURIComponent(rt(e,"wc_ev")||""),i=this.client.session.keys.includes(t);i&&this.client.session.update(t,{transportType:P.link_mode}),this.client.core.dispatchEnvelope({topic:t,message:s,sessionExists:i})}),c(this,"registerLinkModeListeners",async()=>{var e;if(os()||as()&&(e=this.client.metadata.redirect)!=null&&e.linkMode){const t=global==null?void 0:global.Linking;if(typeof t<"u"){t.addEventListener("url",this.handleLinkModeMessage,this.client.name);const s=await t.getInitialURL();s&&setTimeout(()=>{this.handleLinkModeMessage({url:s})},50)}}}),c(this,"getTVFApproveParams",e=>{try{const t=cs(e.namespaces),s=ls(e.namespaces),i=ps(e.namespaces),r=e.sessionProperties,n=e.scopedProperties;return{approvedChains:t,approvedMethods:s,approvedEvents:i,sessionProperties:r,scopedProperties:n}}catch(t){return this.client.logger.warn(t,"Error getting TVF approve params"),{}}}),c(this,"getTVFParams",(e,t,s)=>{var i,r,n;if(!((i=t.request)!=null&&i.method))return{};const a={correlationId:e,rpcMethods:[t.request.method],chainId:t.chainId};try{const l=this.extractTxHashesFromResult(t.request,s);a.txHashes=l,a.contractAddresses=this.isValidContractData(t.request.params)?[(n=(r=t.request.params)==null?void 0:r[0])==null?void 0:n.to]:[]}catch(l){this.client.logger.warn(l,"Error getting TVF params")}return a}),c(this,"isValidContractData",e=>{var t;if(!e)return!1;try{const s=e?.data||((t=e?.[0])==null?void 0:t.data);if(!s.startsWith("0x"))return!1;const i=s.slice(2);return/^[0-9a-fA-F]*$/.test(i)?i.length%2===0:!1}catch{}return!1}),c(this,"extractTxHashesFromResult",(e,t)=>{var s;try{if(!t)return[];const i=e.method,r=yt[i];if(i==="sui_signTransaction")return[hs(t.transactionBytes)];if(i==="near_signTransaction")return[nt(t)];if(i==="near_signTransactions")return t.map(a=>nt(a));if(i==="xrpl_signTransactionFor"||i==="xrpl_signTransaction")return[(s=t.tx_json)==null?void 0:s.hash];if(i==="polkadot_signTransaction")return[ds({transaction:e.params.transactionPayload,signature:t.signature})];if(i==="algo_signTxn")return ot(t)?t.map(a=>at(a)):[at(t)];if(i==="cosmos_signDirect")return[us(t)];if(i==="wallet_sendCalls")return gs(t);if(typeof t=="string")return[t];const n=t[r.key];if(ot(n))return i==="solana_signAllTransactions"?n.map(a=>ys(a)):n;if(typeof n=="string")return[n]}catch(i){this.client.logger.warn(i,"Error extracting tx hashes from result")}return[]})}async processPendingMessageEvents(){try{const o=this.client.session.keys,e=this.client.core.relayer.messages.getWithoutAck(o);for(const[t,s]of Object.entries(e))for(const i of s)try{await this.onProviderMessageEvent({topic:t,message:i,publishedAt:Date.now()})}catch{this.client.logger.warn(`Error processing pending message event for topic: ${t}, message: ${i}`)}}catch(o){this.client.logger.warn(o,"processPendingMessageEvents failed")}}isInitialized(){if(!this.initialized){const{message:o}=m("NOT_INITIALIZED",this.name);throw new Error(o)}}async confirmOnlineStateOrThrow(){await this.client.core.relayer.confirmOnlineStateOrThrow()}registerRelayerEvents(){this.client.core.relayer.on(Ot.message,o=>{this.onProviderMessageEvent(o)})}async onRelayMessage(o){const{topic:e,message:t,attestation:s,transportType:i}=o,{publicKey:r}=this.client.auth.authKeys.keys.includes(_e)?this.client.auth.authKeys.get(_e):{responseTopic:void 0,publicKey:void 0};try{const n=await this.client.core.crypto.decode(e,t,{receiverPublicKey:r,encoding:i===P.link_mode?ye:Z});Es(n)?(this.client.core.history.set(e,n),await this.onRelayEventRequest({topic:e,payload:n,attestation:s,transportType:i,encryptedId:G(t)})):fs(n)?(await this.client.core.history.resolve(n),await this.onRelayEventResponse({topic:e,payload:n,transportType:i}),this.client.core.history.delete(e,n.id)):(this.client.logger.error(`onRelayMessage() -> unknown payload: ${JSON.stringify(n)}`),await this.onRelayEventUnknownPayload({topic:e,payload:n,transportType:i})),await this.client.core.relayer.messages.ack(e,t)}catch(n){this.client.logger.error(`onRelayMessage() -> failed to process an inbound message: ${t}`),this.client.logger.error(n)}}registerExpirerEvents(){this.client.core.expirer.on(bt.expired,async o=>{const{topic:e,id:t}=$t(o.target);if(t&&this.client.pendingRequest.keys.includes(t))return await this.deletePendingSessionRequest(t,m("EXPIRED"),!0);if(t&&this.client.auth.requests.keys.includes(t))return await this.deletePendingAuthRequest(t,m("EXPIRED"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession({topic:e,expirerHasDeleted:!0}),this.client.events.emit("session_expire",{topic:e})):t&&(await this.deleteProposal(t,!0),this.client.events.emit("proposal_expire",{id:t}))})}registerPairingEvents(){this.client.core.pairing.events.on(Ye.create,o=>this.onPairingCreated(o)),this.client.core.pairing.events.on(Ye.delete,o=>{this.addToRecentlyDeleted(o.topic,"pairing")})}isValidPairingTopic(o){if(!ee(o,!1)){const{message:e}=m("MISSING_OR_INVALID",`pairing topic should be a string: ${o}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(o)){const{message:e}=m("NO_MATCHING_KEY",`pairing topic doesn't exist: ${o}`);throw new Error(e)}if(ne(this.client.core.pairing.pairings.get(o).expiry)){const{message:e}=m("EXPIRED",`pairing topic: ${o}`);throw new Error(e)}}async isValidSessionTopic(o){if(!ee(o,!1)){const{message:e}=m("MISSING_OR_INVALID",`session topic should be a string: ${o}`);throw new Error(e)}if(this.checkRecentlyDeleted(o),!this.client.session.keys.includes(o)){const{message:e}=m("NO_MATCHING_KEY",`session topic doesn't exist: ${o}`);throw new Error(e)}if(ne(this.client.session.get(o).expiry)){await this.deleteSession({topic:o});const{message:e}=m("EXPIRED",`session topic: ${o}`);throw new Error(e)}if(!this.client.core.crypto.keychain.has(o)){const{message:e}=m("MISSING_OR_INVALID",`session topic does not exist in keychain: ${o}`);throw await this.deleteSession({topic:o}),new Error(e)}}async isValidSessionOrPairingTopic(o){if(this.checkRecentlyDeleted(o),this.client.session.keys.includes(o))await this.isValidSessionTopic(o);else if(this.client.core.pairing.pairings.keys.includes(o))this.isValidPairingTopic(o);else if(ee(o,!1)){const{message:e}=m("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${o}`);throw new Error(e)}else{const{message:e}=m("MISSING_OR_INVALID",`session or pairing topic should be a string: ${o}`);throw new Error(e)}}async isValidProposalId(o){if(!Kt(o)){const{message:e}=m("MISSING_OR_INVALID",`proposal id should be a number: ${o}`);throw new Error(e)}if(!this.client.proposal.keys.includes(o)){const{message:e}=m("NO_MATCHING_KEY",`proposal id doesn't exist: ${o}`);throw new Error(e)}if(ne(this.client.proposal.get(o).expiryTimestamp)){await this.deleteProposal(o);const{message:e}=m("EXPIRED",`proposal id: ${o}`);throw new Error(e)}}validateRequestExpiry(o){if(o&&!Ut(o,Te)){const{message:e}=m("MISSING_OR_INVALID",`request() expiry: ${o}. Expiry must be a number (in seconds) between ${Te.min} and ${Te.max}`);throw new Error(e)}}}class Ls extends re{constructor(o,e){super(o,e,dt,Re),this.core=o,this.logger=e}}class It extends re{constructor(o,e){super(o,e,ut,Re),this.core=o,this.logger=e}}class Ms extends re{constructor(o,e){super(o,e,mt,Re,t=>t.id),this.core=o,this.logger=e}}class $s extends re{constructor(o,e){super(o,e,St,we,()=>_e),this.core=o,this.logger=e}}class Ks extends re{constructor(o,e){super(o,e,Et,we),this.core=o,this.logger=e}}class Us extends re{constructor(o,e){super(o,e,ft,we,t=>t.id),this.core=o,this.logger=e}}var Gs=Object.defineProperty,js=(S,o,e)=>o in S?Gs(S,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):S[o]=e,Ge=(S,o,e)=>js(S,typeof o!="symbol"?o+"":o,e);class Fs{constructor(o,e){this.core=o,this.logger=e,Ge(this,"authKeys"),Ge(this,"pairingTopics"),Ge(this,"requests"),this.authKeys=new $s(this.core,this.logger),this.pairingTopics=new Ks(this.core,this.logger),this.requests=new Us(this.core,this.logger)}async init(){await this.authKeys.init(),await this.pairingTopics.init(),await this.requests.init()}}var Hs=Object.defineProperty,Qs=(S,o,e)=>o in S?Hs(S,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):S[o]=e,_=(S,o,e)=>Qs(S,typeof o!="symbol"?o+"":o,e);class qe extends Lt{constructor(o){super(o),_(this,"protocol",De),_(this,"version",Le),_(this,"name",Ie.name),_(this,"metadata"),_(this,"core"),_(this,"logger"),_(this,"events",new Nt),_(this,"engine"),_(this,"session"),_(this,"proposal"),_(this,"pendingRequest"),_(this,"auth"),_(this,"signConfig"),_(this,"on",(t,s)=>this.events.on(t,s)),_(this,"once",(t,s)=>this.events.once(t,s)),_(this,"off",(t,s)=>this.events.off(t,s)),_(this,"removeListener",(t,s)=>this.events.removeListener(t,s)),_(this,"removeAllListeners",t=>this.events.removeAllListeners(t)),_(this,"connect",async t=>{try{return await this.engine.connect(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"pair",async t=>{try{return await this.engine.pair(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"approve",async t=>{try{return await this.engine.approve(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"reject",async t=>{try{return await this.engine.reject(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"update",async t=>{try{return await this.engine.update(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"extend",async t=>{try{return await this.engine.extend(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"request",async t=>{try{return await this.engine.request(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"respond",async t=>{try{return await this.engine.respond(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"ping",async t=>{try{return await this.engine.ping(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"emit",async t=>{try{return await this.engine.emit(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"disconnect",async t=>{try{return await this.engine.disconnect(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"find",t=>{try{return this.engine.find(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"getPendingSessionRequests",()=>{try{return this.engine.getPendingSessionRequests()}catch(t){throw this.logger.error(t.message),t}}),_(this,"authenticate",async(t,s)=>{try{return await this.engine.authenticate(t,s)}catch(i){throw this.logger.error(i.message),i}}),_(this,"formatAuthMessage",t=>{try{return this.engine.formatAuthMessage(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"approveSessionAuthenticate",async t=>{try{return await this.engine.approveSessionAuthenticate(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"rejectSessionAuthenticate",async t=>{try{return await this.engine.rejectSessionAuthenticate(t)}catch(s){throw this.logger.error(s.message),s}}),this.name=o?.name||Ie.name,this.metadata=ms(o?.metadata),this.signConfig=o?.signConfig;const e=ws({logger:o?.logger||Ie.logger,name:this.name});this.logger=e,this.core=o?.core||new kt(o),this.session=new It(this.core,this.logger),this.proposal=new Ls(this.core,this.logger),this.pendingRequest=new Ms(this.core,this.logger),this.engine=new Ds(this),this.auth=new Fs(this.core,this.logger)}static async init(o){const e=new qe(o);return await e.initialize(),e}get context(){return _s(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.auth.init(),await this.engine.init(),this.logger.info("SignClient Initialization Success")}catch(o){throw this.logger.info("SignClient Initialization Failure"),this.logger.error(o.message),o}}}const zs=It,Ys=qe;export{vt as AUTH_CONTEXT,St as AUTH_KEYS_CONTEXT,Et as AUTH_PAIRING_TOPIC_CONTEXT,_t as AUTH_PROTOCOL,_e as AUTH_PUBLIC_KEY_NAME,ft as AUTH_REQUEST_CONTEXT,we as AUTH_STORAGE_PREFIX,bs as AUTH_VERSION,gt as ENGINE_CONTEXT,K as ENGINE_QUEUE_STATES,N as ENGINE_RPC_OPTS,Ps as HISTORY_CONTEXT,qs as HISTORY_EVENTS,Ns as HISTORY_STORAGE_VERSION,wt as METHODS_TO_VERIFY,dt as PROPOSAL_CONTEXT,Os as PROPOSAL_EXPIRY,Ke as PROPOSAL_EXPIRY_MESSAGE,mt as REQUEST_CONTEXT,ut as SESSION_CONTEXT,se as SESSION_EXPIRY,Te as SESSION_REQUEST_EXPIRY_BOUNDARIES,Me as SIGN_CLIENT_CONTEXT,Ie as SIGN_CLIENT_DEFAULT,Is as SIGN_CLIENT_EVENTS,De as SIGN_CLIENT_PROTOCOL,Ts as SIGN_CLIENT_STORAGE_OPTIONS,Re as SIGN_CLIENT_STORAGE_PREFIX,Le as SIGN_CLIENT_VERSION,zs as SessionStore,Ys as SignClient,yt as TVF_METHODS,$e as WALLETCONNECT_DEEPLINK_CHOICE,qe as default};
//# sourceMappingURL=index.js.map
